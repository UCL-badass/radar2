Model PCFDM ;

//This model is a fraud detection model

Objective Min ExpectedFinancialLoss = EV(FinancialLoss) with 50000 margin;

FinancialLoss =AverageFraudValue* NbrCompromisedAccounts*NbrFraudPerAccountBeforeBlocked;

NbrCompromisedAccounts = NbrAccounts * CompromisedAccountRatio;

NbrAccounts = normal(10^6,100);

CompromisedAccountRatio = deterministic(0.0001);

AverageFraudValue =normal(500,50);
//AverageFraudValue = FinancialLoss;

NbrFraudPerAccountBeforeBlocked = decision("blocking policy"){
    "block first"          : NbrFraudBeforeDetection;
    "investigage first"    : NbrFraudBeforeDetection + NbrFraudDuringInvestigation;
}

NbrFraudBeforeDetection = decision("processing type"){
	"continuous"    :    1 / ContinuousTrueAlertRate;
	"batch"         :    NbrFraudPerCompromisedAccountPerDay / 2 * BatchTrueAlertRate;
}
  
NbrFraudPerCompromisedAccountPerDay = deterministic(3);

NbrFraudDuringInvestigation = NbrFraudPerCompromisedAccountPerDay * InvestigationDelay;

InvestigationDelay = deterministic(1/3);

ContinuousTrueAlertRate = decision("fraud detection method"){
	"classifier" :  ContinuousAlertThreshold;
	"rule-based" :  triangular(0.75,0.8,0.9);
}

ContinuousAlertThreshold = decision("threshold level"){
	"high"   : deterministic(0.9);
	"medium" : deterministic(0.8);
	"low"    : deterministic(0.7);
}

BatchTrueAlertRate = decision("fraud detection method"){
	"classifier" :  BatchAlertThreshold;
	"rule-based" :  deterministic(0.80);
}

BatchAlertThreshold = decision("threshold level"){
	"high"   : deterministic(0.95);
	"medium" : deterministic(0.85);
	"low"    : deterministic(0.75);
}


Objective Min InvestigationCost = EV(InvestCost) with 50000 margin;

InvestCost = NbrAlerts * CostPerAlert; 
    
CostPerAlert = normal(50, 10) ;

NbrAlerts = NbrTrueAlerts + NbrFalseAlerts ;
    
NbrTrueAlerts = NbrFraud * TrueAlertRate;

NbrFalseAlerts = NbrLegitTransactions * TrueNegativeRate ;

TrueAlertRate = decision("processing type"){
    "continuous" : ContinuousTrueAlertRate;
    "batch"      : BatchTrueAlertRate;

}

TrueNegativeRate = decision("processing type"){
    "continuous" : ContinuousTrueNegativeRate;
    "batch"      : BatchTrueNegativeRate;
}	
	
ContinuousTrueNegativeRate = decision("fraud detection method"){
	"classifier" :  ContinuousClassierTrueNegativeRate;
	"rule-based" :  deterministic(0.99);
}

ContinuousClassierTrueNegativeRate = decision("threshold level"){
	"high"   : deterministic(0.90);
	"medium" : deterministic(0.99);
	"low"    : deterministic(0.999);
}

BatchTrueNegativeRate = decision("fraud detection method"){
	"classifier" :  BatchClassifierTrueNegativeRate;
	"rule-based" :  deterministic(0.995);
}

BatchClassifierTrueNegativeRate = decision("threshold level"){
	"high"   : deterministic(0.99);
	"medium" : deterministic(0.995);
	"low"    : deterministic(0.999);
}

NbrFraud = NbrAccounts * CompromisedAccountRatio * NbrFraudPerCompromisedAccountPerDay;

NbrLegitTransactions = NbrAccounts  * NbrLegitTransactionsPerAccountPerDay;

NbrFraudPerCompromisedAccountPerDay  = deterministic(3);

NbrLegitTransactionsPerAccountPerDay = deterministic(2);



